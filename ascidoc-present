#!/usr/bin/env ruby

require 'fileutils'
require 'listen'

# Compile the content of the directory to a presentation into dir
# @param presentation_dir directory containing sources
def compile_presentation(presentation_dir)
  out_dir = "_dist/#{presentation_dir}"
  out_dir['src/']=''

  puts "Compiling presentation '#{presentation_dir}' into '#{out_dir}'"
  system "bundle exec asciidoctor-revealjs --destination-dir=#{out_dir} --out-file=index.html -arevealjsdir=../../_reveal.js #{presentation_dir}/_presentation.adoc"
  FileUtils.cp_r "#{presentation_dir}/images", "#{out_dir}"
end

# List all directories containing a file named '_presentation.adoc' which marks a presentation
def list_presentation_dirs()
  puts 'Search for presentations'
  Dir.glob('**/_presentation.adoc').map {|p| p.chomp('/_presentation.adoc') }
end

# initializes a file listener to src and recompiles
def configure_recompile()
  listener = Listen.to('src') do |modified, added, removed|
    puts 'Found changes to files'
    (modified.map{ |p| p.rpartition('/').first } | added.map{ |p| p.rpartition('/').first! } | removed.map{ |p| p.rpartition('/').first! })
      .each { |p| compile_presentation p  }
  end
  listener.start
  puts 'Watch dog started'
  sleep
end

# Generates a new presentation skeleton
def generate_new(name)
  puts "Generate new presentation '#{name}'"
  FileUtils.mkdir_p "src/#{name}/images"
  File.open("src/#{name}/_presentation.adoc", "w"){ |f|
    f.write ":imagesdir: images\n\n//start content\n"
    f.write"= #{name}\n\n\n"
    f.write "//end content\ninclude::images/_sources.adoc[]" }
  File.open("src/#{name}/images/_sources.adoc", "w"){ |f| f.write "== Image sources\n* source 1" }
end

# Prints the help
def print_help()
  puts 'asciidoc-present - a small Asciidoctor presentation utility'
  puts "USAGE '$ ascidoc-present [clean, build, watch]'"
  puts "\tclean/c\t- removes prior build slides"
  puts "\tbuild/b\t- builds all presentations"
  puts "\twatch/w\t- rebuilds changed presentation on save"
  puts "\tnew/i n\t- generate a new presentation skeleton under name 'n'. New is not chainable!!"
  puts "\thelp/h\t- prints this help"
end

ARGV.each { |cmd|
  case cmd.upcase
  when 'CLEAN', 'C'
    FileUtils.remove_dir "_dist", force: true
  when 'BUILD', 'W'
    list_presentation_dirs.each { |p| compile_presentation p }
  when 'WATCH', 'W'
    configure_recompile
  when 'NEW', 'N'
    if ARGV[1] == nil || ARGV.length != 2
      print_help
      exit
    end
    generate_new ARGV[1]
    exit
  when 'HELP', 'H'
    print_help
  else
    puts "Unable to understand '#{cmd}', type help for further infos"
    print_help
  end
}


